/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Chris Milson-Tokunaga
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// 4 or fewer character keycode aliases to keep the layouts nice
#undef COMM
#define COMM COMMA
#undef PERC
#define PERC PERCENT
#undef CIRC
#define CIRC CARET
#undef TILD
#define TILD TILDE
#undef EQL
#define EQL EQUAL
#undef MINS
#define MINS MINUS
#undef GRV
#define GRV GRAVE
#undef UNDS
#define UNDS UNDERSCORE
#undef RGHT 
#define RGHT RIGHT
#undef SPC
#define SPC SPACE
#undef STOP
#define STOP C_STOP
#undef PREV 
#define PREV C_PREVIOUS
#undef NEXT
#define NEXT C_NEXT
#undef VOLU 
#define VOLU C_VOLUME_UP
#undef VOLD 
#define VOLD C_VOLUME_DOWN
#undef PLAY
#define PLAY C_PLAY_PAUSE
#undef BRIU
#define BRIU C_BRIGHTNESS_INC
#undef BRID
#define BRID C_BRIGHTNESS_DEC
#undef MUTE
#define MUTE C_MUTE

// Unobtrusive trans
#define ________ &trans

#define SUPER_1 &kc ESCAPE
#define SUPER_2 &kc TAB
// Was KC_BTN1 on qmk keymap, but not supported in stock zmk yet.
#define SUPER_3 &none
#define SUPER_4 &kc BACKSPACE
#define SUPER_5 &kc ENTER
#define SUPER_6 &kc LCTRL
#define SUPER_7 &to BASE
#define SUPER_8 &kc LSHFT

&sl {
  release-after-ms = <2000>;
};

/ {
//  behaviors {
//    tomo: behaviour_tomo {
//      compatible = "zmk,behaviour-hold-tap";
//      label = "to_mo";
//      #binding-cells = <2>;
//      flavor = "balanced";
//      tapping-term-ms = <200>;
//      bindings = <&to>, <&mo>;
//    }
//  };

  keymap {
    compatible = "zmk,keymap";

    base_layer {
      label = "BASE"
      bindings = <
        &kp Q    &kp W    &kp E    &kp R    &kp T              &kp Y    &kp U    &kp I    &kp O    &kp P
        &kp A    &kp S    &kp D    &kp F    &kp G              &kp H    &kp J    &kp K    &kp L    &kp SEMI
        &kp Z    &kp X    &kp C    &kp V    &kp B              &kp N    &kp M    &kp COMM &kp DOT  &kp FSLH
                                   &kp LGUI &kp SPC            &to SPEC &kp LSHFT
      >;
    };

    special_layer {
      label = "SPEC"
      bindings = <
        SUPER_1  &kp AT   &kp HASH &kp DLLR &kp PERC           &kp CIRC &kp AMPS &kp STAR &kp TILD SUPER_4 
        SUPER_2  &kp EXCL &kp EQL  &kp MINS &kp APOS           &kp GRV  &kp BSLH &kp LBRC &kp RBRC SUPER_5 
        SUPER_3  ________ &kp PLUS &kp UNDS &kp DQT            &kp LPAR &kp RPAR &kp LBKT &kp RBKT &tog ARRW
                                   SUPER_6  SUPER_7            &to NUMS SUPER_8
      >;
    };

    arrow_layer {
      label = "ARRW"
      // Left hand contained mouse control - not supported in stock zmk yet.
      bindings = <
        SUPER_1  ________ ________ ________ &reset             &reset   ________ ________ ________ SUPER_4 
        SUPER_2  ________ ________ ________ ________           &kp LEFT &kp DOWN &kp UP   &kp RGHT SUPER_5 
        SUPER_3  ________ ________ ________ ________           ________ ________ ________ ________ ________
                                   SUPER_6  SUPER_7            ________ SUPER_8
      >;
    };

    number_layer {
      label = "NUMS"
      bindings = <
        SUPER_1  &kp STOP &kp PREV &kp NEXT ________           &kp N1   &kp N7   &kp N8   &kp N9   SUPER_4 
        SUPER_2  &kp VOLU &kp VOLD &kp PLAY ________           &kp SPC  &kp N4   &kp N5   &kp N6   SUPER_5 
        SUPER_3  &kp BRID &kp BRIU &kp MUTE ________           &kp N0   &kp N1   &kp N2   &kp N3   &sl NUMX 
                                   SUPER_6  SUPER_7            &kp ____ SUPER_8
      >;
    };

    number_aux_layer {
      label = "NUMX"
      bindings = <
        SUPER_1  &kp F7   &kp F8   &kp F9   &kp F12            ________ ________ ________ ________ SUPER_4 
        SUPER_2  &kp F4   &kp F5   &kp F6   &kp F11            ________ &kp PLUS &kp STAR &kp DOT  SUPER_5 
        SUPER_3  &kp F1   &kp F2   &kp F3   &kp F10            &kp COLN &kp MINS &kp FSLH &kp COMM &none
                                   SUPER_6  SUPER_7            ________ SUPER_8
      >;
    };
  };
};
